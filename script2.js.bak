var inside = new fabric.Canvas('inside-door');
var outside = new fabric.Canvas('outside-door');

const DOOR_WIDTH = inside.width;
const DOOR_HEIGHT = inside.height;
const ICON_SIZE = 60;

var doorClosed = true;
var doorLocked = true;

var alertIndices = {'doorLocked': 0, 'doorUnlocked': 0, 'doorClosed': 1, 'doorOpen': 1, 'childLock': 2, 'houseAlarm': 3, 'newMessage': 4}

/** 
 * Draws objects, but also collects and returns the canvas index of
 * each.
 */
function drawObjects(canvas, objectArray) {
    var objectIndices = [];
    // The index of first added object will be the number of objects
    // already on the canvas.
    objectIndices.push(canvas.getObjects().length);
    if (objectArray.length != 0) {
        for (object in objectArray) {
            inside.add(objectArray[object]);
        }
    }
    return objectIndices;
}

function eraseObjects(objectArray) {
    if (objectArray.length != 0) {
        for (object in objectArray) {
                outside.remove(objectArray[object]);
        }
    }
}

// Draw doorknobs

var knobIn = new fabric.Circle({
    radius: 20, fill: 'black', 
    originX: 'center', originY: 'center', 
    lockMovementX: true, lockMovementY: true,
    left: DOOR_WIDTH - 40, top: DOOR_HEIGHT / 2
});

var knobOut = new fabric.Circle({
    radius: 20, fill: 'black', 
    originX: 'center', originY: 'center', 
    lockMovementX: true, lockMovementY: true,
    left: 40, top: DOOR_HEIGHT / 2
});

inside.add(knobIn);
outside.add(knobOut);

function lockDoor() {
    popAlert('doorUnlocked');
    pushAlert('doorLocked');
    doorLocked = true;
    redrawNotificationBar();
    insideLockIcon.setElement(document.getElementById('doorLocked'));
    insideLockIcon.scaleToWidth(ICON_SIZE / 2);
    inside.renderAll();
}

function unlockDoor() {
    popAlert('doorLocked');
    pushAlert('doorUnlocked');
    doorLocked = false;
    redrawNotificationBar();
    insideLockIcon.setElement(document.getElementById('doorUnlocked'));
    insideLockIcon.scaleToWidth(ICON_SIZE / 2);
    inside.renderAll();
}

function openDoor() {
    popAlert('doorClosed');
    pushAlert('doorOpen');
    doorClosed = false;
    redrawNotificationBar();
}

function closeDoor() {
    popAlert('doorOpen');
    pushAlert('doorClosed');
    doorClosed = true;
    redrawNotificationBar();
}

knobIn.on('selected', function() {
    // When inside knob is turned, unlock and open the door
    if (doorLocked) unlockDoor();
    if (!doorLocked && doorClosed) openDoor();
    // But close door if it's already open
    else if (!doorLocked && doorOpen) closeDoor();
    inside.deactivateAll();
});

knobOut.on('selected', function() {
    outside.deactivateAll();
});


// Draw notification bar

var notificationBar = new fabric.Rect({
    selectable: false,
    width: DOOR_WIDTH, height: 80,
    opacity: .5,
    alertQueue: ['doorLocked', 'doorClosed', 'houseAlarm']
});

notificationBar.setGradient('fill', {
    // Add a nice opacity gradient to the notification bar
    x1: 0, y1: 0,
    x2: 0, y2: notificationBar.height,
    colorStops: {
        0: 'rgba(0, 0, 0, 1)',
        1: 'rgba(0, 0, 0, 0)'
    }
});

function pushAlert(alertName) {
    var index = notificationBar.alertQueue.indexOf(alertName);
    // If it's not present, add given alert to the queue at the standard index
    // See 'alertIndices' object at top of code
    if (index < 0) {
        notificationBar.alertQueue.splice(alertIndices[alertName], 0, alertName);
    }
}

function popAlert(alertName) {
    var index = notificationBar.alertQueue.indexOf(alertName);
    // If it's present, remove given alert from the queue
    if (index >= 0) {
        notificationBar.alertQueue.splice(index, 1);
    }
}

function redrawNotificationBar() {
    // Remove previous notifications
    inside.clear();
    inside.add(notificationBar);
    var iconMargin = 10;
    var numberOfAlerts = notificationBar.alertQueue.length;
    var nBarIconSize = notificationBar.height * (2/3.);
    // Resize icons if there are too many to fit in the bar width
    if (iconMargin * (numberOfAlerts + 1) + nBarIconSize * numberOfAlerts > DOOR_WIDTH) {
        nBarIconSize = Math.floor((notificationBar.width - iconMargin * (numberOfAlerts + 1)) / numberOfAlerts);
    }
    // Draw each alert from the alert queue
    for (var i = 0; i < numberOfAlerts; i++) {
        var icon = document.getElementById(notificationBar.alertQueue[i]);
        var notification = new fabric.Image(icon, {
            selectable: false,
            originY: 'center',
            width: nBarIconSize, 
            height: nBarIconSize,
            // They'll be automatically positioned along the width of the bar
            left: 10 + i * (nBarIconSize + 10),
            top: notificationBar.height / 2,
            type: 'notification',
            id: notificationBar.alertQueue[i]
        });
        inside.add(notification);
    }
}


// Draw inside lock/unlock mechanism


/* function drawIcon(url) {
    var obj = null;
    fabric.loadSVGFromURL(url, 
        function(objects, options) {
        obj = fabric.util.groupSVGElements(objects, options);
        obj.scaleToWidth(ICON_SIZE);
        obj.scaleToHeight(ICON_SIZE);
        obj.set({ left: 100, top: 100});
        obj.setShadow({ blur: 20, offsetX: 0, offsetY: 0, color: 'rgba(0,0,0,1)'});
    });
    inside.add(obj);
} */

/* var deletionQueue = [];

fabric.loadSVGFromURL('img/doorOpen.svg', function(objects, options) {
    var obj = fabric.util.groupSVGElements(objects, options);
    obj.scaleToWidth(ICON_SIZE);
    obj.scaleToHeight(ICON_SIZE);
    obj.set({ left: 100, top: 100, id: 'doorOpen'});
    obj.setShadow({blur: 30, offsetX: 0, offsetY: 0, color: 'rgba(0,0,0,1)'});
    queueForDeletion(inside._objects.length);
    inside.add(obj);
});

function queueForDeletion(index) {
    deletionQueue.push(index);
    console.log(deletionQueue);
}

function deleteQueue() {
    for (index in deletionQueue) {
        console.log(index);
    }
}

deleteQueue(); */

fabric.loadSVGFromURL('img/doorOpen.svg', function(objects, options) {
    var obj = fabric.util.groupSVGElements(objects, options);
    obj.scaleToWidth(ICON_SIZE);
    obj.scaleToHeight(ICON_SIZE);
    obj.set({ left: 100, top: 100, id: 'doorOpen'});
    obj.setShadow({blur: 30, offsetX: 0, offsetY: 0, color: 'rgba(0,0,0,1)'});
    inside.add(obj);
    //console.log(inside.getObjects());
}); 

function deleteObject(id) {
    $.each(inside._objects, function(index, obj) {
        if(obj == null) return;
        $.each(obj, function(attr, value) {
            if(value == id){ 
                 inside.remove(inside._objects[index]);
                 inside.renderAll();
             }
        });
    });
}

//console.log(inside._objects.length);
/* var insideLockIcon = new fabric.Image(
    document.getElementById('doorLocked'), {
        originX: 'center', 
        originY: 'center',
        width: ICON_SIZE / 2, 
        height: ICON_SIZE / 2,
        left: knobIn.left,
        top: knobIn.top - 50,
        id: 'insideLock'
});

inside.add(insideLockIcon);

insideLockIcon.on('selected', function() {
    if (doorLocked) unlockDoor();
    else lockDoor();
    inside.deactivateAll();
}); */

/* inside.setBackgroundImage('img/waves.jpg', inside.renderAll.bind(inside), {
    width: DOOR_WIDTH,
    height: DOOR_HEIGHT,
    // Needed to position backgroundImage at 0/0
    originX: 'left',
    originY: 'top'
}); */

redrawNotificationBar();

//console.log(fabric.util.getById('doorLocked'));
//inside.remove(inside._objects[4]);

knobOut.on('selected', function() {
    deleteObject('doorOpen');
    outside.deactivateAll();
});
